[gd_scene load_steps=4 format=3 uid="uid://5g42xrdersjh"]

[ext_resource type="Shader" uid="uid://dp7m8cdrklhov" path="res://Shader/roll_demo.tres" id="1_78wys"]
[ext_resource type="Texture2D" uid="uid://tesik16wptk" path="res://icon.svg" id="2_augsw"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6hm2d"]
shader = ExtResource("1_78wys")

[node name="RollDemo" type="Node2D"]

[node name="Icon" type="Sprite2D" parent="."]
texture_repeat = 2
material = SubResource("ShaderMaterial_6hm2d")
position = Vector2(133, 112)
texture = ExtResource("2_augsw")

[node name="Label" type="Label" parent="."]
offset_left = 358.0
offset_top = 5.0
offset_right = 835.0
offset_bottom = 889.0
text = "Texture 2D : 
选择Texture 2D这是一个特殊类型，代表贴图本身。（目前该版本无法预览）

UV ： 它类似于平面坐标系的XY ，仅代表纹理坐标轴，通常U是水平坐标，V是垂直坐标；坐标范围通常是0~1之间
其中0表示纹理的起始位置，1表示纹理的结束位置
当一张贴图映射到UV坐标后，我们就可以对其进行平移、缩放、旋转、重复平铺、扭曲等一系列操作。

创建一个UV节点：
预览是一张彩色的图，展开端口输出是二位向量由red、green组成，单独看red由左到右的黑白渐变，表现在数值上就是0~1；单独看green由上到下的黑白渐变，同样是从0~1的变化
在Godot中，UV坐标系的原点位于左上角，U正方向向右，V正方向向下。将水平座标（red）加0.5，然后使用Vector2Compose节点将偏移后的水平坐标和垂直坐标(green)重新组合起来。将偏移后的UV给到Texture 2D 输入的UV

FloatOP是op结尾的操作节点，类似的有很多，他可以提供该类型的基本运算。"
autowrap_mode = 1
